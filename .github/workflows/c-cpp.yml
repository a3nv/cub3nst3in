name: C/C++ CI

on:
  push: {}
  pull_request: {}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
          build-essential cmake valgrind \
          lcov python3 python3-pip python3-setuptools pipx \
          libcriterion-dev libreadline-dev \
          xorg-dev libx11-dev libxext-dev libxpm-dev libbsd-dev

      - name: Upgrade pip and setuptools
        run: |
          python3 -m pip install --upgrade pip setuptools

      - name: Install norminette (pip)
        run: |
          python3 -m pip install norminette

      - name: Build mlx
        run: |
          cd mlx
          make

      - name: Run norminette
        run: make norm

      - name: Clean Build
        run: make fclean

      - name: Build
        run: make




    # - name: Run Unit Tests
    #   run: make -C test
    # - name: Run Unit Tests
    #   run: make -C test run
    # - name: Debug Directory Content
    #   run: |
    #     echo "Current directory: $(pwd)"
    #     echo "Files in ./test:"
    #     ls -la ./test
    #     echo "Files in ./src:"
    #     ls -la ./src
    # - name: Verify Coverage Files
    #   run: |
    #     echo "Checking for .gcda files:"
    #     find . -name "*.gcda" || echo "No .gcda files found!"
    # - name: Debug Coverage Files
    #   run: |
    #     echo "Checking for .gcda files in test/build:"
    #     find test/build -name "*.gcda"
    #     echo "Checking for .gcno files in test/build:"
    #     find test/build -name "*.gcno"
    # - name: Generate Coverage Report
    #   run: |
    #     lcov --capture \
    #          --directory test/build \
    #          --output-file coverage.info \
    #          --ignore-errors mismatch \
    #          --ignore-errors gcov \
    #          --ignore-errors empty \
    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v5
    #   with:
    #     files: coverage.info
    #     token: ${{ secrets.CODECOV_TOKEN }}
    #
